import numpy as np
import matplotlib.pyplot as plt
import sys
import os

# Set up the project root so that a_solvers can be found
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if project_root not in sys.path:
    sys.path.insert(0, project_root)
from a_solvers.inner_solver import solve, phi, t, n, tau_w

tau_w = np.array([0.015, 0.072, 0.115, 0.156, 0.24])
g = 5.0
tau_z_values = np.linspace(0.1, 25.0, 50)

tau_z_baseline = 0.1
sol_base, res_base, conv_base = solve(tau_w, tau_z_baseline, g)
if not conv_base:
    print("Baseline model did not converge at tau_z = 0.1")

w_base = res_base["w"]
l_base = res_base["l"]
l_agents_base = res_base["l_agents"]
c_agents_base = res_base["c_agents"]
d_agents_base = res_base["d_agents"]

# Calculate baseline utilities
utility_baseline = np.zeros(n)
for i in range(n):
    utility_baseline[i] = np.log(c_agents_base[i]) + np.log(d_agents_base[i] - 0.2) + np.log(l_agents_base[i])

utility_values = np.zeros((n, len(tau_z_values)))

for j, tau_z in enumerate(tau_z_values):
    sol_new, res_new, conv_new = solve(tau_w, tau_z, g)
    if not conv_new:
        print(f"Model did not converge for tau_z = {tau_z:.2f}; using baseline utility.")
        for i in range(n):
            utility_values[i, j] = utility_baseline[i]  # Use baseline utility
    else:
        w_new = res_new["w"]
        l_new = res_new["l"]
        l_agents_new = res_new["l_agents"]
        c_agents_new = res_new["c_agents"]
        d_agents_new = res_new["d_agents"]
        for i in range(n):
            utility_values[i, j] = np.log(c_agents_new[i]) + np.log(d_agents_new[i] - 0.2) + np.log(l_agents_new[i])

# Create separate plots for each household
fig, axes = plt.subplots(1, n, figsize=(15, 3))
colors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red', 'tab:purple']

# Calculate individual ymin and ymax for each household
ymin_values = np.nanmin(utility_values, axis=1)
ymax_values = np.nanmax(utility_values, axis=1)

# Find a common tick interval
global_ymin = np.nanmin(utility_values)
global_ymax = np.nanmax(utility_values)
yrange = global_ymax - global_ymin
num_ticks = 5  # Adjust as needed
tick_interval = yrange / (num_ticks - 1)

for i in range(n):
    ax = axes[i]
    ax.plot(tau_z_values, utility_values[i, :],
            color=colors[i], linestyle='-', linewidth=2)
    ax.set_xlabel(r'$\tau_z$', fontsize=10)
    ax.set_ylabel('Utility', fontsize=10)
    ax.tick_params(axis='both', which='major', labelsize=8)
    ax.set_title(f'Household {i+1}', fontsize=10)

    # Set y-axis limits and ticks for each household
    ymin = ymin_values[i]
    ymax = ymax_values[i]

    # Calculate the number of ticks needed for this household
    num_ticks_i = int(np.ceil((ymax - ymin) / tick_interval)) + 1

    # Generate the ticks
    ticks = [ymin + k * tick_interval for k in range(num_ticks_i)]

    # Set the ticks and limits
    ax.set_yticks(ticks)
    ax.set_ylim([ymin, ymax])

plt.tight_layout()
plt.savefig("b_dynamics/d_utility_separate_variable_y.pdf")
plt.show()